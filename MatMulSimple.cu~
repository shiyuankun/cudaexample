#include <stdio.h>
#include <math.h>

typedef struct{
    int width;
    int height;
    int pitch;
    float * elements;
} Matrix;
#define WIDTH 7
#define HEIGHT 8
__global__ void MatrixMulOnDevice(const Matrix M, const Matrix N, Matrix P)
{
    
    int tx = threadIdx.x;
    int ty = threadIdx.y;
    float Pvalue = 0;
    for (int k = 0;k<M.width; ++ k)
    {
        float Melement = M.elements[ty * M.width + k];
        float Nelement = N.elements[k * N.width + tx];
        Pvalue += Melement * Nelement;
    }
    P.elements[ty * P.pitch + tx] = Pvalue;
}

void CopyToDeviceMatrix(Matrix Mdevice, const Matrix Mhost)
{
    int size = Mhost.width * Mhost.height * sizeof(float);
    cudaMemcpy(Mdevice.elements, Mhost.elements, size, cudaMemcpyHostToDevice);
}

void CopyFromDeviceMatrix(Matrix Mhost, const Matrix Mdevice)
{
    int size = Mdevice.width * Mdevice.height * sizeof(float);
    cudaMemcpy(Mhost.elements, Mdevice.elements, size, cudaMemcpyDeviceToHost);
}

void MatrixMulOnHost(const Matrix M, const Matrix N, Matrix P)
{
    for (int i = 0;i<M.height; ++ i)
        for (int j = 0;j<N.width; ++ j)
        {
            double sum = 0;
            for (int k = 0;k<M.width; ++ k)
            {
                double a = M.elements[i * M.width + k];
                double b = N.elements[k * N.width + j];
                sum += a * b;
            }
            P.elements[i * N.width + j] = sum;
        }
}


void FreeDeviceMatrix(Matrix Mdevice)
{
    cudaFree(Mdevice.elements);
}

Matrix AllocateDeviceMatrix(Matrix Mhost)
{
    Matrix Md;
    Md.width = Mhost.width;
    Md.height = Mhost.height;
    Md.pitch = Mhost.pitch;
    int size = Md.width*Md.height*sizeof(float);
    cudaMalloc((void **) & Md.elements, size);
    return Md;
}


Matrix AllocateMatrix(int width, int height, int ifinit)
{
    Matrix x;
    x.width = width;
    x.height = height;
    x.pitch = height;
    x.elements = (float * )malloc(width * height * sizeof(float));
    if (ifinit)
    {
        for (int i = 0;i<x.height;i ++ )
            for (int j = 0;j<x.width;j ++ )
                x.elements[i * x.width + j] = i*10.0 + j;
    }
    return x;
}

void FreeMatrix(Matrix x)
{
    free(x.elements);
}

void printmatrix(Matrix x)
{
    for (int i=0;i<x.height;i++)
        for (int j=0;j<x.width;j++)
        {
            printf("%f%s", x.elements[i*x.width + j], j==x.width-1?"\n":" ");
        }
}

Matrix testMatrixMulOnHost()
{
    Matrix M = AllocateMatrix(WIDTH, HEIGHT, 1);
    Matrix N = AllocateMatrix(HEIGHT, WIDTH, 1);
    Matrix P = AllocateMatrix(HEIGHT, HEIGHT, 0);
    /* printf("Matrix M:\n"); */
    /* printmatrix(M); */
    /* printf("Matrix N:\n"); */
    /* printmatrix(N); */
    MatrixMulOnHost(M, N, P);
    printf("Matrix P:\n");
    printmatrix(P);

    FreeMatrix(M);
    FreeMatrix(N);
    return P;
// FreeMatrix(P);
}

Matrix testMatrixMulOnDevice()
{
    cudaSetDevice(1);
    Matrix M = AllocateMatrix(WIDTH, HEIGHT, 1);
    Matrix N = AllocateMatrix(HEIGHT, WIDTH, 1);
    Matrix P = AllocateMatrix(HEIGHT, HEIGHT, 0);
    Matrix Md = AllocateDeviceMatrix(M);
    Matrix Nd = AllocateDeviceMatrix(N);
    Matrix Pd = AllocateDeviceMatrix(P);
    CopyToDeviceMatrix(Md, M);
    CopyToDeviceMatrix(Nd, N);
    CopyToDeviceMatrix(Pd, P);
    printf("Matrix M:\n");
    printmatrix(M);
    printf("Matrix N:\n");
    printmatrix(N);
    dim3 dimBlock(HEIGHT, HEIGHT);
    dim3 dimGrid(1, 1);
    MatrixMulOnDevice<<<dimGrid, dimBlock>>>(Md, Nd, Pd);

    CopyFromDeviceMatrix(P, Pd);
    
    printf("Matrix P:\n");
    printmatrix(P);
    FreeDeviceMatrix(Md);
    FreeDeviceMatrix(Nd);
    FreeDeviceMatrix(Pd);

    FreeMatrix(M);
    FreeMatrix(N);
    return P;
    /* FreeMatrix(P); */
}

int cmp(Matrix l, Matrix r)
{
    int i, j;
    int height = l.height;
    int width = l.width;
    for (i = 0;i<height;i ++ )
        for (j = 0;j<width;j ++ )
            if (fabs(l.elements[i*width + j] - r.elements[i*width + j])>0.00001)
            {
                return 0;
            }
                
    return 1;
}

int main()
{
    printf("Matrix Multiplication on Host\n");
    Matrix h = testMatrixMulOnHost();
    printf("Matrix Multiplication on Device\n");
    Matrix d = testMatrixMulOnDevice();
    printf("result check: ");
    if (cmp(h, d))
        printf("%s\n", "correct");
    else
        printf("%s\n", "wrong");
    return 0;
}
